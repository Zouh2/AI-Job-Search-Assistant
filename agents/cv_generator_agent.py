import requests
import json
from datetime import datetime

class CVGeneratorAgent:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://api.groq.com/openai/v1/chat/completions"
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        self.instructions = """
üìÑ Vous √™tes un expert en cr√©ation de CV optimis√©s pour les syst√®mes ATS !

Votre expertise :
1. üéØ Personnalisation Intelligente
   - Adaptation au poste cibl√©
   - Mise en avant des comp√©tences pertinentes
   - Optimisation des mots-cl√©s ATS
   - Structure adapt√©e au secteur

2. üîß Optimisation ATS
   - Format machine-readable
   - Mots-cl√©s strat√©giques
   - Structure standardis√©e
   - √âviter les √©l√©ments graphiques complexes

3. üìê Templates LaTeX Overleaf
   - Code LaTeX professionnel
   - Design moderne et √©pur√©
   - Sections bien structur√©es
   - Compatible ATS

4. üíº Sections Optimis√©es
   - Profil professionnel accrocheur
   - Exp√©riences avec r√©sultats quantifi√©s
   - Comp√©tences techniques et soft skills
   - Formation et certifications
   - Projets pertinents

Processus de cr√©ation :
1. Analyse de l'offre d'emploi
2. Extraction des mots-cl√©s importants
3. Adaptation du CV original
4. G√©n√©ration du code LaTeX
5. Optimisation finale

Format de sortie :
- Code LaTeX complet pour Overleaf
- Conseils de personnalisation
- Score d'optimisation ATS
- Recommandations d'am√©lioration
"""

    def _call_groq_api(self, messages, model="mixtral-8x7b-32768", max_tokens=40096, temperature=0.7):
        """
        Appel √† l'API Groq
        """
        payload = {
            "model": model,
            "messages": messages,
            "max_tokens": max_tokens,
            "temperature": temperature
        }
        
        try:
            response = requests.post(
                self.base_url,
                headers=self.headers,
                json=payload,
                timeout=60
            )
            response.raise_for_status()
            
            result = response.json()
            return result['choices'][0]['message']['content']
        
        except requests.exceptions.RequestException as e:
            raise Exception(f"Erreur API Groq: {str(e)}")
        except KeyError as e:
            raise Exception(f"Format de r√©ponse inattendu: {str(e)}")

    def generate_cv(self, original_cv, job_description, personal_info=None):
        """
        G√©n√®re un CV personnalis√© optimis√© ATS
        """
        try:
            # Ajouter la date actuelle aux instructions
            current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            instructions_with_date = f"{self.instructions}\n\nDate et heure actuelles: {current_datetime}"
            
            # Construire le prompt
            query = f"""
            Cr√©ez un CV personnalis√© optimis√© ATS bas√© sur :
           
            CV ORIGINAL :
            {original_cv}
           
            OFFRE D'EMPLOI :
            {job_description}
           
            INFORMATIONS PERSONNELLES :
            {personal_info if personal_info else "Utiliser les informations du CV original"}
           
            G√©n√©rez un code LaTeX complet pour Overleaf, optimis√© pour les syst√®mes ATS.
            
            INSTRUCTIONS IMPORTANTES :
            1. Commencez directement par le code LaTeX complet
            2. Incluez tous les packages n√©cessaires
            3. Utilisez une structure moderne et professionnelle
            4. Optimisez pour les mots-cl√©s de l'offre d'emploi
            5. Assurez-vous que le CV soit lisible par les syst√®mes ATS
            6. Utilisez des sections claires : Contact, Profil, Exp√©rience, Formation, Comp√©tences
            7. Quantifiez les r√©alisations quand possible
            8. Adaptez le vocabulaire au secteur cibl√©
            
            Apr√®s le code LaTeX, ajoutez :
            - Un score d'optimisation ATS estim√© (/100)
            - 3-5 conseils de personnalisation
            - Les mots-cl√©s importants identifi√©s
            """
            
            # Pr√©parer les messages pour l'API
            messages = [
                {
                    "role": "system",
                    "content": instructions_with_date
                },
                {
                    "role": "user",
                    "content": query
                }
            ]
            
            # Appel √† l'API Groq
            response = self._call_groq_api(
                messages=messages,
                model="mixtral-8x7b-32768",  # Mod√®le recommand√© pour la g√©n√©ration de texte
                max_tokens=4096,
                temperature=0.7
            )
            
            return response
            
        except Exception as e:
            raise Exception(f"Erreur lors de la g√©n√©ration du CV: {str(e)}")

    def analyze_job_keywords(self, job_description):
        """
        Analyse les mots-cl√©s importants d'une offre d'emploi
        """
        try:
            messages = [
                {
                    "role": "system",
                    "content": "Tu es un expert en analyse d'offres d'emploi. Identifie les mots-cl√©s les plus importants pour l'optimisation ATS."
                },
                {
                    "role": "user",
                    "content": f"""
                    Analyse cette offre d'emploi et extrais :
                    1. Les 10 mots-cl√©s techniques les plus importants
                    2. Les 5 comp√©tences soft skills mentionn√©es
                    3. Les exigences de formation/certification
                    4. Le niveau d'exp√©rience requis
                    5. Les responsabilit√©s cl√©s
                    
                    OFFRE D'EMPLOI :
                    {job_description}
                    
                    Format de r√©ponse : JSON structur√©
                    """
                }
            ]
            
            response = self._call_groq_api(messages, temperature=0.3)
            return response
            
        except Exception as e:
            raise Exception(f"Erreur lors de l'analyse des mots-cl√©s: {str(e)}")

    def optimize_cv_section(self, section_content, job_keywords, section_type):
        """
        Optimise une section sp√©cifique du CV
        """
        try:
            messages = [
                {
                    "role": "system",
                    "content": f"Tu es un expert en optimisation de CV. Optimise la section '{section_type}' pour inclure les mots-cl√©s pertinents."
                },
                {
                    "role": "user",
                    "content": f"""
                    Optimise cette section de CV :
                    
                    SECTION ACTUELLE ({section_type}) :
                    {section_content}
                    
                    MOTS-CL√âS √Ä INT√âGRER :
                    {job_keywords}
                    
                    R√©√©crire la section pour :
                    1. Int√©grer naturellement les mots-cl√©s
                    2. Quantifier les r√©sultats
                    3. Utiliser des verbes d'action
                    4. Maintenir la v√©rit√© des informations
                    5. Optimiser pour les syst√®mes ATS
                    """
                }
            ]
            
            response = self._call_groq_api(messages, temperature=0.5)
            return response
            
        except Exception as e:
            raise Exception(f"Erreur lors de l'optimisation de la section: {str(e)}")

    def get_cv_feedback(self, cv_latex, job_description):
        """
        Fournit un feedback d√©taill√© sur le CV g√©n√©r√©
        """
        try:
            messages = [
                {
                    "role": "system",
                    "content": "Tu es un recruteur expert qui √©value les CV. Fournis un feedback constructif et un score ATS."
                },
                {
                    "role": "user",
                    "content": f"""
                    √âvalue ce CV LaTeX par rapport √† cette offre d'emploi :
                    
                    CV LATEX :
                    {cv_latex}
                    
                    OFFRE D'EMPLOI :
                    {job_description}
                    
                    Fournis :
                    1. Score ATS estim√© (/100) avec justification
                    2. Points forts du CV
                    3. Points √† am√©liorer
                    4. Mots-cl√©s manquants importants
                    5. Suggestions de reformulation
                    6. Note globale et recommandations
                    """
                }
            ]
            
            response = self._call_groq_api(messages, temperature=0.3)
            return response
            
        except Exception as e:
            raise Exception(f"Erreur lors de l'√©valuation du CV: {str(e)}")